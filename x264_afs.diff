--- x264/x264.c	2014-02-16 11:10:36 +0900
+++ x264afs/x264.c	2014-02-16 10:48:31 +0900
@@ -66,2 +66,7 @@
 
+#define AFS_CLIENT_NO_VBUF
+#include "afs_client.h" /* ADD */
+#include "util.h"       /* ADD */
+static int b_afs_use = 0;
+
 #ifdef _WIN32
@@ -341,2 +346,26 @@ static void print_version_info( void )
 }
+ 
+static void afs_get_drop(int frame, int* drop, int* tmp_drop, int* next_jitter)
+{
+  int next_drop, quarter_jitter;
+  unsigned char status;
+
+  next_drop = 0;
+  quarter_jitter = 0;
+
+  status = afs_read(frame + 1);
+  if(status & AFS_FLAG_ERROR) return;
+  next_drop = afs_set_status(status, 0);
+  if(next_drop){
+    afs_drop();
+    quarter_jitter = 0;
+  }else
+    quarter_jitter = afs_get_jitter();
+
+  *drop = *tmp_drop;
+  *next_jitter = quarter_jitter;
+  *tmp_drop = next_drop;
+
+  return;
+}
 
@@ -1633,2 +1662,20 @@ generic_option:
     }
+	/* AFS使用かチェック */
+    if( !( afs_read_check() & AFS_FLAG_ERROR ) )
+    {
+        info.vfr = 1;
+        info.timebase_num = info.fps_den;
+        info.timebase_den = info.fps_num * 4;// AFSは1/4精度でフレームをシフトするため、分解能として4倍のスケールが必要
+        b_user_fps = 0;
+        b_afs_use = 1;
+        x264_cli_log( "x264", X264_LOG_INFO, "change to vfr mode, using AFS timestamp.\n");
+        if (input_opt.timebase) {
+            input_opt.timebase = NULL;
+            x264_cli_log( "x264", X264_LOG_WARNING, "using AFS timestamp, --timebase ignored.\n");
+        }
+        if (tcfile_name) {
+            tcfile_name = NULL;
+            x264_cli_log( "x264", X264_LOG_WARNING, "using AFS timestamp, --tcfile-in ingnored.\n");
+        }
+    }
     if( b_user_fps )
@@ -1786,3 +1833,3 @@ static int encode_frame( x264_t *h, hnd_
 
-static int64_t print_status( int64_t i_start, int64_t i_previous, int i_frame, int i_frame_total, int64_t i_file, x264_param_t *param, int64_t last_ts )
+static int64_t print_status( int64_t i_start, int64_t i_previous, int i_frame, int i_frame_total, int64_t i_file, x264_param_t *param, int64_t last_ts, int total_drop )
 {
@@ -1802,8 +1849,8 @@ static int64_t print_status( int64_t i_s
         int eta = i_elapsed * (i_frame_total - i_frame) / ((int64_t)i_frame * 1000000);
-        sprintf( buf, "x264 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d",
+        sprintf( buf, "x264 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d, afs %d",
                  100. * i_frame / i_frame_total, i_frame, i_frame_total, fps, bitrate,
-                 eta/3600, (eta/60)%60, eta%60 );
+                 eta/3600, (eta/60)%60, eta%60, total_drop );
     }
     else
-        sprintf( buf, "x264 %d frames: %.2f fps, %.2f kb/s", i_frame, fps, bitrate );
+        sprintf( buf, "x264 %d frames: %.2f fps, %.2f kb/s, afs %d", i_frame, fps, bitrate, total_drop );
     fprintf( stderr, "%s  \r", buf+5 );
@@ -1853,2 +1900,9 @@ static int encode( x264_param_t *param,
     double  pulldown_pts = 0;
+
+    int     drop = 0;
+    int     tmp_drop = 0;
+    int     total_drop = 0;
+    int     next_jitter = 0;
+    int64_t next_pts = 0;
+
     int     retval = 0;
@@ -1904,3 +1958,9 @@ static int encode( x264_param_t *param,
 
-        if( !param->b_vfr_input )
+        if( b_afs_use )
+        {
+            afs_get_drop(i_frame, &drop, &tmp_drop, &next_jitter);
+            pic.i_pts = next_pts;
+            next_pts = (int64_t)(i_frame+1)*4 + next_jitter;
+        }
+        else if( !param->b_vfr_input )
             pic.i_pts = i_frame;
@@ -1927,6 +1987,9 @@ static int encode( x264_param_t *param,
 
-        second_largest_pts = largest_pts;
-        largest_pts = pic.i_pts;
-        if( opt->tcfile_out )
-            fprintf( opt->tcfile_out, "%.6f\n", pic.i_pts * ((double)param->i_timebase_num / param->i_timebase_den) * 1e3 );
+        if( !drop )
+        {
+            second_largest_pts = largest_pts;
+            largest_pts = pic.i_pts;
+            if( opt->tcfile_out )
+                fprintf( opt->tcfile_out, "%.6f\n", pic.i_pts * ((double)param->i_timebase_num / param->i_timebase_den) * 1e3 );
+        }
 
@@ -1936,14 +1999,18 @@ static int encode( x264_param_t *param,
         prev_dts = last_dts;
-        i_frame_size = encode_frame( h, opt->hout, &pic, &last_dts );
-        if( i_frame_size < 0 )
-        {
-            b_ctrl_c = 1; /* lie to exit the loop */
-            retval = -1;
-        }
-        else if( i_frame_size )
-        {
-            i_file += i_frame_size;
-            i_frame_output++;
-            if( i_frame_output == 1 )
-                first_dts = prev_dts = last_dts;
+        if( drop )
+            total_drop++;
+        else {
+            i_frame_size = encode_frame( h, opt->hout, &pic, &last_dts );
+            if( i_frame_size < 0 )
+            {
+                b_ctrl_c = 1; /* lie to exit the loop */
+                retval = -1;
+            }
+            else if( i_frame_size )
+            {
+                i_file += i_frame_size;
+                i_frame_output++;
+                if( i_frame_output == 1 )
+                    first_dts = prev_dts = last_dts;
+            }
         }
@@ -1955,3 +2022,3 @@ static int encode( x264_param_t *param,
         if( opt->b_progress && i_frame_output )
-            i_previous = print_status( i_start, i_previous, i_frame_output, param->i_frame_total, i_file, param, 2 * last_dts - prev_dts - first_dts );
+            i_previous = print_status( i_start, i_previous, i_frame_output, param->i_frame_total, i_file, param, 2 * last_dts - prev_dts - first_dts, total_drop );
     }
@@ -1975,3 +2042,3 @@ static int encode( x264_param_t *param,
         if( opt->b_progress && i_frame_output )
-            i_previous = print_status( i_start, i_previous, i_frame_output, param->i_frame_total, i_file, param, 2 * last_dts - prev_dts - first_dts );
+            i_previous = print_status( i_start, i_previous, i_frame_output, param->i_frame_total, i_file, param, 2 * last_dts - prev_dts - first_dts, total_drop );
     }
